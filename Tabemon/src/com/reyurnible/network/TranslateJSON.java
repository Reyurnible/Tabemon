package com.reyurnible.network;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import com.google.gson.Gson;import com.reyurnible.object.Recipe;import com.reyurnible.object.Weather;import android.graphics.Color;public class TranslateJSON {	//天気情報のパーサー	public static Weather weatherParse(JSONObject rootObje){		try {			JSONObject weatherObje;			weatherObje = rootObje.getJSONArray("weather").getJSONObject(0);			String weather = weatherObje.getString("main");			JSONObject mainObje = rootObje.getJSONObject("main");			double temp = mainObje.getDouble("temp");			double pressure = mainObje.getDouble("pressure");			int humidity = mainObje.getInt("humidity");			JSONObject windObje = rootObje.getJSONObject("wind");			double wind_speed = windObje.getDouble("speed");			JSONObject cloudsObje = rootObje.getJSONObject("clouds");			int clouds = cloudsObje.getInt("all");			return new Weather(temp, pressure, humidity, wind_speed, clouds, weather);		} catch (JSONException e) {			e.printStackTrace();		}		return null;	}		public static ArrayList<Recipe> recipesParse(JSONObject rootObje){		ArrayList<Recipe> recipeList = new ArrayList<Recipe>();		try {			JSONArray recipeArray = rootObje.getJSONArray("results");			for(int i=0;i<recipeArray.length();i++){				try{					recipeList.add(recipeParse(recipeArray.getJSONObject(i)));				}catch(NullPointerException e){					e.printStackTrace();				}			}		} catch (JSONException e) {			e.printStackTrace();		}		return recipeList;	}		public static ArrayList<String> recipesJSONParse(JSONObject rootObje){		ArrayList<String> recipeList = new ArrayList<String>();		try {			JSONArray recipeArray = rootObje.getJSONArray("results");			for(int i=0;i<recipeArray.length();i++){				recipeList.add(recipeArray.getJSONObject(i).toString());			}		} catch (JSONException e) {			e.printStackTrace();		}		return recipeList;	}		//レシピ単体のパーサー	public static Recipe recipeParse(JSONObject rootObje){		try {			JSONObject recipeObje = rootObje.getJSONObject("result");			Recipe recipe = new Gson().fromJson(recipeObje.toString(), Recipe.class);			return recipe;		} catch (JSONException e) {			e.printStackTrace();		}		/*		long recipeId = recipeObje.getLong("recipeId");		String recipeTitle,		String recipeUrl,		String foodImageUrl,		int pickup,		int shop,		String nickname,		String recipeDescription,		List<String> recipeMaterial,		String recipeIndication,		String recipeCost,		String categoryUrl,		String categoryName,		String recipePublishday		*/		return null;	}	}