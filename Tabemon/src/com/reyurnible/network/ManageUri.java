package com.reyurnible.network;import java.util.Calendar;import java.util.Date;import com.reyurnible.object.MyAccount;import com.reyurnible.object.Weather;import com.reyurnible.tabemon.R;import android.content.Context;import android.content.res.Resources;import android.location.Location;import android.net.Uri;public class ManageUri {	static private final String baseUrlProduct = "app.rakuten.co.jp";	static private String baseUrl = baseUrlProduct;		static private Uri.Builder getBaseUri(){		Uri.Builder builder = new Uri.Builder();		builder.scheme("http");		builder.encodedAuthority(baseUrl);		return builder;	}	//サインアッップ・マイページ・プロフィール変更	static public String getUriSample(){		Uri.Builder builder = getBaseUri();		//叩く先のAPI		builder.path("/api/sample");		return builder.build().toString();	}	static public String getTempalature(Location location){		Uri.Builder builder = new Uri.Builder();		builder.scheme("http");		builder.encodedAuthority("api.openweathermap.org");		builder.path("/data/2.5/weather");		builder.appendQueryParameter("lat", Double.toString(location.getLatitude()));		builder.appendQueryParameter("lon", Double.toString(location.getLongitude()));		return builder.build().toString();	}	//条件検索API	static public String getRecipes(Context context,int page){		Uri.Builder builder = new Uri.Builder();		builder.scheme("https");		builder.encodedAuthority(baseUrl);		builder.path("/services/api/Recipe/Search/20140719");		Resources res = context.getResources();		builder.appendQueryParameter("applicationId", res.getString(R.string.rakuten_applicationId));		//とりあえず、人気メニューを表示		builder.appendQueryParameter("categoryId","30");		builder.appendQueryParameter("page",Integer.toString(page));		return builder.build().toString();	}		//条件検索API		static public String getRecipes(Context context,int page,Weather weather){			Uri.Builder builder = new Uri.Builder();			builder.scheme("https");			builder.encodedAuthority(baseUrl);			builder.path("/services/api/Recipe/Search/20140719");			Resources res = context.getResources();			builder.appendQueryParameter("applicationId", res.getString(R.string.rakuten_applicationId));			Calendar nowTime = Calendar.getInstance();			//Morning			if(2<nowTime.get(Calendar.HOUR_OF_DAY)&&nowTime.get(Calendar.HOUR_OF_DAY)<=10){				//とりあえず、人気メニューを表示				builder.appendQueryParameter("categoryId","38-501");			//Lunch			}else if(10<nowTime.get(Calendar.HOUR_OF_DAY)&&nowTime.get(Calendar.HOUR_OF_DAY)<17){				//とりあえず、人気メニューを表示				builder.appendQueryParameter("categoryId","38-502");			//Dinner			}else{				//とりあえず、人気メニューを表示				builder.appendQueryParameter("categoryId","38-503");			}			MyAccount account = MyAccount.getAccount(context);			int indicationResult = 0;			int costResult = 0;			indicationResult += account.sex==0?0:1;			costResult += account.sex==0?1:3;			switch(account.age){			case 0:				indicationResult += 2;				costResult += 1;				break;			case 1:				indicationResult += 3;				costResult += 1;				break;			case 2:				indicationResult += 3;				costResult += 2;				break;			case 3:				indicationResult += 4;				costResult += 2;				break;			case 4:				indicationResult += 4;				costResult += 3;				break;			}			if(weather.pressure<=1013){				indicationResult += 1;			}			//不快指数　温度×0.81+湿度×0.01×(0.99×温度−14.3)+46.3			Double disconfortValue = weather.temp*0.81 + weather.humidity*0.01*(0.99*weather.temp-14.3) + 46.3;			if(disconfortValue>=77){				indicationResult -= 2;			}			if(disconfortValue>=80){				indicationResult -= 2;			}			if(indicationResult<=1){				indicationResult = 1;			}else if(indicationResult >= 4){				indicationResult = 4;			}			if(costResult<=1){				costResult = 1;			}else if(costResult >= 3){				costResult = 3;			}			builder.appendQueryParameter("recipeIndication",Integer.toString(indicationResult));			builder.appendQueryParameter("recipeCost",Integer.toString(costResult));			builder.appendQueryParameter("page",Integer.toString(page));			return builder.build().toString();		}}